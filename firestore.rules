/**
 * @fileoverview Firestore Security Rules for SpendWise application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Users can only
 * read and write their own data. This ensures data privacy and prevents
 * unauthorized access.
 *
 * Data Structure:
 * - All user data is nested under /users/{userId}.
 * - Expenses, budgets, and future plans are stored as subcollections
 *   under each user's document.
 *
 * Key Security Decisions:
 * - Listing all users is disallowed to prevent information harvesting.
 * - Ambiguous or missing relationships default to strict owner-only access.
 *
 * Denormalization for Authorization:
 * - The `userId` field in Expense, Budget, and FuturePlan documents is
 *   used to enforce ownership.
 *
 * Structural Segregation:
 * - All user-specific data is stored under the /users/{userId} path, ensuring
 *   private access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-level access control for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile document.
     * @allow (get) User with UID 'user123' can read their own profile document.
     * @allow (update) User with UID 'user123' can update their own profile document.
     * @allow (delete) User with UID 'user123' can delete their own profile document.
     * @deny (create) User with UID 'user456' cannot create a profile document for user 'user123'.
     * @deny (get) User with UID 'user456' cannot read the profile document of user 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile document of user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the profile document of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email is string;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-level access control for expense records.
     * @path /users/{userId}/expenses/{expenseId}
     * @allow (create) User with UID 'user123' can create an expense record under their profile.
     * @allow (get) User with UID 'user123' can read an expense record under their profile.
     * @allow (list) User with UID 'user123' can list expense records under their profile.
     * @allow (update) User with UID 'user123' can update an expense record under their profile.
     * @allow (delete) User with UID 'user123' can delete an expense record under their profile.
     * @deny (create) User with UID 'user456' cannot create an expense record under the profile of user 'user123'.
     * @deny (get) User with UID 'user456' cannot read an expense record under the profile of user 'user123'.
     * @deny (list) User with UID 'user456' cannot list expense records under the profile of user 'user123'.
     * @deny (update) User with UID 'user456' cannot update an expense record under the profile of user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete an expense record under the profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/expenses/{expenseId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-level access control for budget records.
     * @path /users/{userId}/budgets/{budgetId}
     * @allow (create) User with UID 'user123' can create a budget record under their profile.
     * @allow (get) User with UID 'user123' can read a budget record under their profile.
     * @allow (list) User with UID 'user123' can list budget records under their profile.
     * @allow (update) User with UID 'user123' can update a budget record under their profile.
     * @allow (delete) User with UID 'user123' can delete a budget record under their profile.
     * @deny (create) User with UID 'user456' cannot create a budget record under the profile of user 'user123'.
     * @deny (get) User with UID 'user456' cannot read a budget record under the profile of user 'user123'.
     * @deny (list) User with UID 'user456' cannot list budget records under the profile of user 'user123'.
     * @deny (update) User with UID 'user456' cannot update a budget record under the profile of user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a budget record under the profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/budgets/{budgetId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-level access control for future plan records.
     * @path /users/{userId}/futurePlans/{planId}
     * @allow (create) User with UID 'user123' can create a future plan record under their profile.
     * @allow (get) User with UID 'user123' can read a future plan record under their profile.
     * @allow (list) User with UID 'user123' can list future plan records under their profile.
     * @allow (update) User with UID 'user123' can update a future plan record under their profile.
     * @allow (delete) User with UID 'user123' can delete a future plan record under their profile.
     * @deny (create) User with UID 'user456' cannot create a future plan record under the profile of user 'user123'.
     * @deny (get) User with UID 'user456' cannot read a future plan record under the profile of user 'user123'.
     * @deny (list) User with UID 'user456' cannot list future plan records under the profile of user 'user123'.
     * @deny (update) User with UID 'user456' cannot update a future plan record under the profile of user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete a future plan record under the profile of user 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/futurePlans/{planId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}